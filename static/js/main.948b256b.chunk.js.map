{"version":3,"sources":["components/ToDoList.js","components/Input.js","App.js","serviceWorker.js","index.js"],"names":["ToDoList","props","state","toggleChange","bind","removeDone","event","this","todoList","each","id","target","value","done","checked","setState","preventDefault","val","content","map","item","className","key","text","onClick","type","onChange","length","Component","Input","handleChange","clearInput","addTask","console","log","onSubmit","App","Todo","task","updatedList","lastElementId","slice","push","i","splice","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.948b256b.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass ToDoList extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            ...props\r\n        }\r\n\r\n        this.toggleChange = this.toggleChange.bind(this)\r\n        this.removeDone = this.removeDone.bind(this)\r\n    }\r\n    toggleChange(event) {\r\n        for (const each of this.state.todoList) {\r\n            if (each.id == event.target.value) {\r\n                each.done = event.target.checked;\r\n            }\r\n        }\r\n\r\n        this.setState({ todoList: this.state.todoList })\r\n    }\r\n    removeDone(event) {\r\n        event.preventDefault();\r\n        var val = event.target.value;\r\n        this.props.removeDone(val);\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.todoList.length !== state.todoList.length) {\r\n            return {\r\n                todoList: props.todoList\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n    render() {\r\n        const content = this.props.todoList.map((item) =>\r\n            <div className=\"text-center\" key={item.id}>\r\n                <li >\r\n                    <div>\r\n                        <label className={item.done ? 'completed' : ''} >\r\n                            {item.text}\r\n                        </label>\r\n                    </div>\r\n\r\n                    {item.done ? <button className=\"btn btn-outline-danger btn-sm checkbox\" value={item.id} onClick={this.removeDone} >Remove</button> : \r\n                        <input type=\"checkbox\" className=\"checkbox\"\r\n                            value={item.id}\r\n                            checked={item.done}\r\n                            onChange={this.toggleChange}\r\n                        />}\r\n\r\n                </li>\r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <div className=\"list-wrapper\" >\r\n                <ul className=\"d-flex flex-column-reverse todo-list\">\r\n                    {content}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToDoList\r\n","import React, { Component } from 'react'\r\n\r\nclass Input extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: 'add something to do later'\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.clearInput = this.clearInput.bind(this);\r\n        this.addTask = this.addTask.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    addTask(event) {\r\n        console.log(event.target.value)\r\n        event.preventDefault();\r\n        var val = this.state.value;\r\n        event.target.value = '';\r\n        this.props.addTask(val);\r\n    }\r\n\r\n    clearInput() {\r\n        this.setState({ value: '' });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"text-center\">\r\n                <form className=\"form-group\" onSubmit={this.addTask}>\r\n                    <div className=\"add-items d-flex\">\r\n                        <input\r\n                            type=\"text\" value={this.state.value} onChange={this.handleChange}\r\n                            onClick={this.clearInput}\r\n                            className=\"form-control\"\r\n                        />\r\n                        <button className=\"add btn btn-primary font-weight-bold todo-list-add-btn\"  >Add</button> </div>\r\n                </form>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Input\r\n","import React, { Component } from 'react'\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport ToDoList from './components/ToDoList'\nimport Input from './components/Input'\n\nexport class App extends Component {\n\n  constructor(props) {\n    super(props)\n\n    let Todo = [{\n      id: 1, text: \"First thing to do\", done: true\n    }, {\n      id: 2, text: \"Second thing to do\", done: false\n    }, {\n      id: 3, text: \"Third thing to do\", done: false\n    }\n    ]\n\n    this.state = {\n      Todo: Todo\n    }\n\n    this.addTask = this.addTask.bind(this);\n    this.removeDone = this.removeDone.bind(this)\n  }\n\n\n  addTask(task) {\n    let updatedList = this.state.Todo;\n    let lastElementId = this.state.Todo.length > 0 ? this.state.Todo.slice(-1)[0].id : 1;\n    updatedList.push({ id: ++lastElementId, text: task, done: false });\n    this.setState({ Todo: updatedList });\n  }\n\n  removeDone(id) {\n    let updatedList = this.state.Todo;\n    for (var i = updatedList.length; i--;) {\n      if (updatedList[i].id == id) {\n        updatedList.splice(i, 1);\n      }\n      this.setState({ Todo: updatedList });\n\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"page-content page-container\" id=\"page-content\">\n        <div className=\"padding\">\n          <div className=\"row container d-flex justify-content-center\">\n            <div className=\"col-lg-12\">\n              <div className=\"card px-3\">\n                <div className=\"card-body\">\n                  <h4 className=\"card-title\">Awesome Todo list</h4>\n                  <Input addTask={this.addTask} />\n                  <ToDoList todoList={this.state.Todo} removeDone={this.removeDone} />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}